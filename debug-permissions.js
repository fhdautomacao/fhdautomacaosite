// Script para debugar permiss√µes do usu√°rio admin
console.log('üîç Debug de Permiss√µes do Usu√°rio Admin');

// Simular verifica√ß√£o de permiss√µes
const checkAdminPermissions = (email) => {
  const isAdmin = email === 'adminfhd@fhd.com'
  const isUser = email === 'fhduser@fhd.com'
  
  const permissions = {
    // Permiss√µes gerais
    canAccessDashboard: isAdmin,
    canAccessBills: isAdmin,
    canAccessProfitSharing: isAdmin,
    canAccessCompanies: isAdmin,
    canAccessSEO: isAdmin,
    
    // Permiss√µes espec√≠ficas
    canAccessQuotations: true, // Ambos podem acessar
    canAccessClients: true, // Ambos podem acessar
    canAccessProducts: true, // Ambos podem acessar
    canAccessGallery: true, // Ambos podem acessar
    canAccessServices: true, // Ambos podem acessar
    canAccessCosts: isAdmin,
    
    // Permiss√µes de administra√ß√£o
    isAdmin: isAdmin,
    isUser: isUser
  }
  
  return permissions
}

// Testar com adminfhd@fhd.com
const adminPermissions = checkAdminPermissions('adminfhd@fhd.com')
console.log('‚úÖ Permiss√µes do adminfhd@fhd.com:', adminPermissions)

// Verificar se√ß√µes que devem estar vis√≠veis
const sections = [
  { id: 'dashboard', requiresPermission: null },
  { id: 'content', requiresPermission: null },
  { id: 'catalog', requiresPermission: null },
  { id: 'media', requiresPermission: null },
  { id: 'relationships', requiresPermission: null },
  { id: 'quotations', requiresPermission: 'canAccessQuotations' },
  { id: 'bills', requiresPermission: 'canAccessBills' },
  { id: 'costs', requiresPermission: 'canAccessBills' },
  { id: 'companies', requiresPermission: 'canAccessBills' },
  { id: 'profit-sharing', requiresPermission: 'canAccessBills' },
  { id: 'settings', requiresPermission: null }
]

console.log('üìã Verifica√ß√£o de se√ß√µes:')
sections.forEach(section => {
  const hasPermission = !section.requiresPermission || adminPermissions[section.requiresPermission]
  console.log(`${hasPermission ? '‚úÖ' : '‚ùå'} ${section.id}: ${hasPermission ? 'VIS√çVEL' : 'OCULTO'} (${section.requiresPermission || 'sem permiss√£o'})`)
})

// Verificar se√ß√µes que devem estar vis√≠veis para admin
const expectedVisibleSections = [
  'dashboard', 'content', 'catalog', 'media', 'relationships', 
  'quotations', 'bills', 'costs', 'companies', 'profit-sharing', 'settings'
]

console.log('\nüéØ Se√ß√µes esperadas para admin:')
expectedVisibleSections.forEach(sectionId => {
  const section = sections.find(s => s.id === sectionId)
  const hasPermission = !section.requiresPermission || adminPermissions[section.requiresPermission]
  console.log(`${hasPermission ? '‚úÖ' : '‚ùå'} ${sectionId}`)
})

console.log('\nüîß Poss√≠veis problemas:')
console.log('1. Verificar se o email est√° correto: adminfhd@fhd.com')
console.log('2. Verificar se as permiss√µes est√£o sendo aplicadas corretamente')
console.log('3. Verificar se h√° configura√ß√µes de visibilidade no menu')
console.log('4. Verificar se o localStorage tem as permiss√µes salvas')
