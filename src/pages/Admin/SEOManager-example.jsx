import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { 
  Search, 
  Plus, 
  Edit, 
  Save, 
  X, 
  Trash2, 
  Eye, 
  Copy, 
  Globe,
  Settings,
  FileText,
  Image,
  Hash,
  Link,
  MessageSquare,
  Code,
  CheckCircle,
  AlertCircle,
  Info
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { Switch } from '@/components/ui/switch'
import { Label } from '@/components/ui/label'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger 
} from '@/components/ui/dialog'
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'
import { toast } from 'sonner'

// Importar configura√ß√£o CORS
import { seoApi, setupAdminAuth, isAdminAuthenticated } from '@/lib/api-config'

const SEOManager = () => {
  const [seoSettings, setSeoSettings] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [editingId, setEditingId] = useState(null)
  const [showPreview, setShowPreview] = useState({})
  const [previewData, setPreviewData] = useState({})
  const [isCreating, setIsCreating] = useState(false)
  const [newSeoData, setNewSeoData] = useState({
    page_name: '',
    title: '',
    description: '',
    keywords: '',
    canonical_url: '',
    og_title: '',
    og_description: '',
    og_image: '',
    og_type: 'website',
    og_site_name: 'FHD Automa√ß√£o Industrial',
    og_locale: 'pt_BR',
    twitter_card: 'summary_large_image',
    twitter_title: '',
    twitter_description: '',
    twitter_image: '',
    structured_data: null,
    robots: 'index, follow',
    author: 'FHD Automa√ß√£o Industrial',
    viewport: 'width=device-width, initial-scale=1.0',
    charset: 'UTF-8',
    favicon_url: '',
    is_active: true
  })

  // Verificar autentica√ß√£o admin ao carregar
  useEffect(() => {
    if (!isAdminAuthenticated()) {
      console.warn('‚ö†Ô∏è Usu√°rio n√£o autenticado como admin')
      toast.error('Acesso restrito - autentica√ß√£o necess√°ria')
      // Redirecionar para login se necess√°rio
      // window.location.href = '/admin/login'
    }
  }, [])

  // Buscar configura√ß√µes de SEO usando a nova configura√ß√£o CORS
  const fetchSeoSettings = async () => {
    try {
      setLoading(true)
      console.log('üåê [SEOManager] Buscando configura√ß√µes com prote√ß√£o CORS...')
      
      // Usar a fun√ß√£o da configura√ß√£o CORS
      const result = await seoApi.getSettings()
      
      if (result.success) {
        setSeoSettings(result.data || [])
        console.log('‚úÖ [SEOManager] Configura√ß√µes carregadas com sucesso')
        toast.success(`${result.data.length} configura√ß√µes carregadas`)
      } else {
        console.error('‚ùå [SEOManager] Erro ao carregar configura√ß√µes:', result.error)
        toast.error('Erro ao carregar configura√ß√µes')
        setSeoSettings([])
      }
    } catch (error) {
      console.error('‚ùå [SEOManager] Erro na requisi√ß√£o:', error)
      
      // Tratar erros espec√≠ficos de CORS
      if (error.message.includes('CORS')) {
        toast.error('Erro de CORS - verifique as configura√ß√µes')
      } else if (error.message.includes('n√£o autorizado')) {
        toast.error('Acesso n√£o autorizado - verifique autentica√ß√£o')
      } else {
        toast.error('Erro ao conectar com a API')
      }
      
      setSeoSettings([])
    } finally {
      setLoading(false)
    }
  }

  // Salvar configura√ß√£o usando a nova configura√ß√£o CORS
  const handleSave = async (data) => {
    try {
      console.log('üíæ [SEOManager] Salvando configura√ß√£o com prote√ß√£o CORS...')
      
      let result
      if (data.id) {
        // Atualizar configura√ß√£o existente
        result = await seoApi.updateSettings(data.id, data)
      } else {
        // Criar nova configura√ß√£o
        result = await seoApi.saveSettings(data)
      }
      
      if (result.success) {
        console.log('‚úÖ [SEOManager] Configura√ß√£o salva com sucesso')
        toast.success('Configura√ß√£o salva com sucesso!')
        
        // Atualizar lista
        await fetchSeoSettings()
        
        // Limpar formul√°rio
        setEditingId(null)
        setIsCreating(false)
        setNewSeoData({
          page_name: '',
          title: '',
          description: '',
          keywords: '',
          canonical_url: '',
          og_title: '',
          og_description: '',
          og_image: '',
          og_type: 'website',
          og_site_name: 'FHD Automa√ß√£o Industrial',
          og_locale: 'pt_BR',
          twitter_card: 'summary_large_image',
          twitter_title: '',
          twitter_description: '',
          twitter_image: '',
          structured_data: null,
          robots: 'index, follow',
          author: 'FHD Automa√ß√£o Industrial',
          viewport: 'width=device-width, initial-scale=1.0',
          charset: 'UTF-8',
          favicon_url: '',
          is_active: true
        })
      } else {
        console.error('‚ùå [SEOManager] Erro ao salvar:', result.error)
        toast.error('Erro ao salvar configura√ß√£o')
      }
    } catch (error) {
      console.error('‚ùå [SEOManager] Erro na requisi√ß√£o de salvamento:', error)
      
      // Tratar erros espec√≠ficos
      if (error.message.includes('n√£o autorizado')) {
        toast.error('Acesso n√£o autorizado - verifique autentica√ß√£o admin')
      } else {
        toast.error('Erro ao salvar configura√ß√£o')
      }
    }
  }

  // Deletar configura√ß√£o usando a nova configura√ß√£o CORS
  const handleDelete = async (id) => {
    try {
      console.log('üóëÔ∏è [SEOManager] Deletando configura√ß√£o com prote√ß√£o CORS...')
      
      const result = await seoApi.deleteSettings(id)
      
      if (result.success) {
        console.log('‚úÖ [SEOManager] Configura√ß√£o deletada com sucesso')
        toast.success('Configura√ß√£o deletada com sucesso!')
        
        // Atualizar lista
        await fetchSeoSettings()
      } else {
        console.error('‚ùå [SEOManager] Erro ao deletar:', result.error)
        toast.error('Erro ao deletar configura√ß√£o')
      }
    } catch (error) {
      console.error('‚ùå [SEOManager] Erro na requisi√ß√£o de exclus√£o:', error)
      
      if (error.message.includes('n√£o autorizado')) {
        toast.error('Acesso n√£o autorizado - verifique autentica√ß√£o admin')
      } else {
        toast.error('Erro ao deletar configura√ß√£o')
      }
    }
  }

  // Health check da API
  const checkApiHealth = async () => {
    try {
      const result = await seoApi.healthCheck()
      console.log('üè• [SEOManager] API Health:', result)
      toast.success('API funcionando corretamente')
    } catch (error) {
      console.error('‚ùå [SEOManager] API Health Check falhou:', error)
      toast.error('API n√£o est√° respondendo')
    }
  }

  // Carregar dados ao montar componente
  useEffect(() => {
    fetchSeoSettings()
  }, [])

  // Resto do componente permanece o mesmo...
  // (renderiza√ß√£o, formul√°rios, etc.)

  return (
    <div className="container mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold">Gerenciador de SEO</h1>
          <p className="text-muted-foreground">
            Configure as meta tags e SEO para suas p√°ginas
          </p>
        </div>
        
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            onClick={checkApiHealth}
            size="sm"
          >
            <Globe className="w-4 h-4 mr-2" />
            Verificar API
          </Button>
          
          <Button 
            onClick={() => setIsCreating(true)}
            size="sm"
          >
            <Plus className="w-4 h-4 mr-2" />
            Nova Configura√ß√£o
          </Button>
        </div>
      </div>

      {/* Resto da interface permanece o mesmo */}
      <div className="text-center py-8">
        <p className="text-muted-foreground">
          Interface completa do SEOManager aqui...
        </p>
        <p className="text-sm text-muted-foreground mt-2">
          Este √© um exemplo de como integrar a prote√ß√£o CORS
        </p>
      </div>
    </div>
  )
}

export default SEOManager
