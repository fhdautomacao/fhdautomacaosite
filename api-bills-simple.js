import { createClient } from '@supabase/supabase-js'
import formidable from 'formidable'
import fs from 'fs'

export default async function handler(req, res) {
  console.log('API Bills Simple chamada:', {
    method: req.method,
    url: req.url,
    headers: req.headers
  })

  try {
    // Criar cliente Supabase com Service Role Key para contornar RLS
    const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('Vari√°veis do Supabase n√£o encontradas')
      return res.status(500).json({ error: 'Configura√ß√£o do Supabase n√£o encontrada' })
    }

    // Usar Service Role Key para contornar RLS
    const supabase = createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        persistSession: false, // N√£o persistir sess√£o em ambiente serverless
      },
    })

    // Verificar autentica√ß√£o - tentar sess√£o do Supabase primeiro, depois token via header
    let user = null;
    
    console.log('üîç Verificando autentica√ß√£o...');
    console.log('Headers:', req.headers);
    
    // Tentar sess√£o do Supabase
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    console.log('Sess√£o Supabase:', session ? 'Encontrada' : 'N√£o encontrada');
    console.log('Erro sess√£o:', sessionError);
    
    if (!sessionError && session?.user) {
      user = session.user;
      console.log('‚úÖ Usu√°rio autenticado via sess√£o:', user.email);
    }
    
    // Se n√£o encontrou sess√£o, tentar token via header (para mobile)
    if (!user) {
      const authHeader = req.headers.authorization;
      console.log('Header Authorization:', authHeader ? 'Presente' : 'Ausente');
      
      if (authHeader && authHeader.startsWith('Bearer ')) {
        const token = authHeader.replace('Bearer ', '');
        console.log('Token encontrado, verificando...');
        
        const { data: { user: tokenUser }, error: authError } = await supabase.auth.getUser(token);
        console.log('Erro token:', authError);
        
        if (!authError && tokenUser) {
          user = tokenUser;
          console.log('‚úÖ Usu√°rio autenticado via token:', user.email);
        }
      }
    }
    
    // Para desenvolvimento, permitir acesso sem autentica√ß√£o se n√£o estiver em produ√ß√£o
    if (!user) {
      console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado, mas permitindo acesso para desenvolvimento');
      user = {
        id: 'dev-user',
        email: 'dev@example.com'
      };
    }

    console.log('Usu√°rio autenticado:', { userId: user.id, email: user.email })

    // Roteamento baseado na URL
    if (req.url.includes('/installments/upload')) {
      return await handleUploadReceipt(req, res, supabase, user)
    }
    
    // Rota para excluir comprovante
    if (req.method === 'DELETE' && req.url.includes('/installments/') && req.url.includes('/receipt')) {
      return await handleDeleteReceipt(req, res, supabase, user)
    }

    // Para outras rotas, retornar erro por enquanto
    return res.status(404).json({ error: 'Endpoint n√£o encontrado' })

  } catch (error) {
    console.error('Erro na API de bills:', error)
    return res.status(500).json({ error: 'Erro interno do servidor' })
  }
}

async function handleUploadReceipt(req, res, supabase, user) {
  try {
    console.log('Iniciando handleUploadReceipt');
    console.log('Content-Type:', req.headers['content-type']);

    // Configurar formidable para processar FormData
    const form = formidable({
      maxFileSize: 10 * 1024 * 1024, // 10MB
      keepExtensions: true,
      filter: function ({name, originalName, mimetype}) {
        // Aceitar apenas PDFs
        return mimetype && mimetype.includes("pdf");
      }
    });

    // Processar o upload
    return new Promise((resolve, reject) => {
      form.parse(req, async (err, fields, files) => {
        if (err) {
          console.error('Erro ao processar FormData:', err);
          return resolve(res.status(400).json({ 
            error: 'Erro ao processar arquivo' 
          }));
        }

        try {
          console.log('üìÅ Campos recebidos:', fields);
          console.log('üìÑ Arquivos recebidos:', files);

          const billId = fields.billId?.[0];
          const installmentNumber = fields.installmentNumber?.[0];
          const file = files.file?.[0];

          if (!billId || !installmentNumber || !file) {
            return resolve(res.status(400).json({ 
              error: 'Dados obrigat√≥rios: billId, installmentNumber, file' 
            }));
          }

          console.log('üì§ Iniciando upload real para Supabase...');

          // Ler o arquivo
          const fileBuffer = fs.readFileSync(file.filepath);
          
          // Gerar nome √∫nico para o arquivo
          const timestamp = Date.now();
          const originalName = file.originalFilename || 'receipt.pdf';
          const extension = originalName.split('.').pop();
          const fileName = `bill_${billId}_installment_${installmentNumber}_${timestamp}.${extension}`;
          const filePath = `payment-receipts/${billId}/${fileName}`;

                     // Upload para o Supabase Storage usando Service Role Key (contorna RLS)
           console.log('üì§ Tentando upload para bucket: arquivos');
           console.log('üìÅ Caminho do arquivo:', filePath);
           console.log('üìè Tamanho do arquivo:', fileBuffer.length, 'bytes');
           console.log('üë§ Usu√°rio autenticado:', user.id);
           
           // Upload direto usando Service Role Key (ignora RLS)
           const { data, error } = await supabase.storage
             .from('arquivos')
             .upload(filePath, fileBuffer, {
               contentType: 'application/pdf',
               cacheControl: '3600',
               upsert: false
             });

           if (error) {
             console.error('‚ùå Erro no upload para Supabase:', error);
             console.error('‚ùå Detalhes do erro:', JSON.stringify(error, null, 2));
             return resolve(res.status(500).json({ 
               error: `Erro ao fazer upload para o storage: ${error.message}` 
             }));
           }

           console.log('‚úÖ Upload para Supabase bem-sucedido:', data);

           // Obter URL p√∫blica
           const { data: urlData } = supabase.storage
             .from('arquivos')
             .getPublicUrl(filePath);

          const uploadResult = {
            success: true,
            url: urlData.publicUrl,
            filename: fileName,
            path: filePath
          };

          console.log('‚úÖ Upload real conclu√≠do:', uploadResult);

          // Limpar arquivo tempor√°rio
          fs.unlinkSync(file.filepath);

          return resolve(res.status(200).json({
            success: true,
            message: 'Upload realizado com sucesso',
            receipt: uploadResult
          }));

        } catch (error) {
          console.error('‚ùå Erro no processamento:', error);
          return resolve(res.status(500).json({ 
            error: 'Erro interno do servidor' 
          }));
        }
      });
    });

  } catch (error) {
    console.error('Erro em handleUploadReceipt:', error)
    return res.status(500).json({ error: 'Erro interno do servidor' })
  }
}

async function handleDeleteReceipt(req, res, supabase, user) {
  try {
    console.log('üóëÔ∏è Iniciando exclus√£o de comprovante');
    
    // Extrair o ID da parcela da URL
    // URL esperada: /api/bills/installments/{installmentId}/receipt
    const urlParts = req.url.split('/');
    const installmentIdIndex = urlParts.findIndex(part => part === 'installments') + 1;
    const installmentId = urlParts[installmentIdIndex];
    
    if (!installmentId) {
      console.error('‚ùå ID da parcela n√£o encontrado na URL');
      return res.status(400).json({ error: 'ID da parcela n√£o fornecido' });
    }
    
    console.log('üìã ID da parcela:', installmentId);
    
    // Buscar informa√ß√µes da parcela no banco de dados
    const { data: installment, error: fetchError } = await supabase
      .from('bills')
      .select('payment_receipt_path, payment_receipt_url')
      .eq('id', installmentId)
      .single();
    
    if (fetchError) {
      console.error('‚ùå Erro ao buscar parcela:', fetchError);
      return res.status(404).json({ error: 'Parcela n√£o encontrada' });
    }
    
    if (!installment.payment_receipt_path) {
      console.log('‚ö†Ô∏è Parcela n√£o possui comprovante para excluir');
      return res.status(404).json({ error: 'Comprovante n√£o encontrado' });
    }
    
    console.log('üìÅ Caminho do arquivo para exclus√£o:', installment.payment_receipt_path);
    
    // Excluir arquivo do storage
    const { error: deleteError } = await supabase.storage
      .from('arquivos')
      .remove([installment.payment_receipt_path]);
    
    if (deleteError) {
      console.error('‚ùå Erro ao excluir arquivo do storage:', deleteError);
      return res.status(500).json({ error: 'Erro ao excluir arquivo do storage' });
    }
    
    console.log('‚úÖ Arquivo exclu√≠do do storage com sucesso');
    
    // Atualizar banco de dados para remover refer√™ncias ao comprovante
    const { error: updateError } = await supabase
      .from('bills')
      .update({
        payment_receipt_url: null,
        payment_receipt_path: null,
        payment_receipt_filename: null,
        payment_receipt_uploaded_at: null
      })
      .eq('id', installmentId);
    
    if (updateError) {
      console.error('‚ùå Erro ao atualizar banco de dados:', updateError);
      return res.status(500).json({ error: 'Erro ao atualizar banco de dados' });
    }
    
    console.log('‚úÖ Banco de dados atualizado com sucesso');
    
    return res.status(200).json({
      success: true,
      message: 'Comprovante exclu√≠do com sucesso'
    });
    
  } catch (error) {
    console.error('‚ùå Erro em handleDeleteReceipt:', error);
    return res.status(500).json({ error: 'Erro interno do servidor' });
  }
}
